{
  "engineConfig": {
    "defaultFlushInterval": "500",
    "datasourceConfigurations": [
      {
        "kind": "GRAPHQL",
        "rootNodes": [
          {
            "typeName": "Query",
            "fieldNames": [
              "unions"
            ]
          }
        ],
        "childNodes": [
          {
            "typeName": "CommonA",
            "fieldNames": [
              "test"
            ]
          },
          {
            "typeName": "CommonB",
            "fieldNames": [
              "broken"
            ]
          },
          {
            "typeName": "A",
            "fieldNames": [
              "common"
            ]
          },
          {
            "typeName": "B",
            "fieldNames": [
              "common"
            ]
          },
          {
            "typeName": "Unions",
            "fieldNames": [
              "abUnion"
            ]
          }
        ],
        "overrideFieldPathFromAlias": true,
        "customGraphql": {
          "fetch": {
            "url": {
              "staticVariableContent": "http://localhost:8080/query"
            },
            "method": "POST",
            "body": {},
            "baseUrl": {},
            "path": {}
          },
          "subscription": {
            "enabled": true,
            "url": {
              "staticVariableContent": "http://localhost:8080/query"
            },
            "protocol": "GRAPHQL_SUBSCRIPTION_PROTOCOL_WS"
          },
          "federation": {
            "enabled": true,
            "serviceSdl": "type Query {\n  unions: [Unions!]!\n}\n\ntype CommonA {\n  test: Int!\n}\n\ntype CommonB {\n  broken: Int!\n}\n\ntype A {\n  common: CommonA!\n}\n\ntype B {\n  common: CommonB!\n}\n\nunion ABUnion = A | B\n\ntype Unions {\n  abUnion: ABUnion!\n}\n\nextend schema @link(\n  url: \"https://specs.apollo.dev/federation/v2.3\",\n  import: [\"@external\", \"@requires\", \"@provides\", \"@key\", \"@shareable\", \"@inaccessible\", \"@tag\", \"@override\", \"@composeDirective\", \"@extends\"]\n)"
          },
          "upstreamSchema": {
            "key": "a2dea343dddf972e25c5e10c5f0081ce81e95527"
          }
        },
        "requestTimeoutSeconds": "10",
        "id": "0"
      }
    ],
    "graphqlSchema": "directive @authenticated on ENUM | FIELD_DEFINITION | INTERFACE | OBJECT | SCALAR\n\ndirective @inaccessible on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ndirective @requiresScopes(scopes: [[openfed__Scope!]!]!) on ENUM | FIELD_DEFINITION | INTERFACE | OBJECT | SCALAR\n\ndirective @tag(name: String!) repeatable on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\nscalar openfed__Scope\n\ntype Query {\n  unions: [Unions!]!\n}\n\ntype CommonA {\n  test: Int!\n}\n\ntype CommonB {\n  broken: Int!\n}\n\ntype A {\n  common: CommonA!\n}\n\ntype B {\n  common: CommonB!\n}\n\nunion ABUnion = A | B\n\ntype Unions {\n  abUnion: ABUnion!\n}",
    "stringStorage": {
      "a2dea343dddf972e25c5e10c5f0081ce81e95527": "schema {\n  query: Query\n}\n\ndirective @authenticated on ENUM | FIELD_DEFINITION | INTERFACE | OBJECT | SCALAR\n\ndirective @composeDirective(name: String!) repeatable on SCHEMA\n\ndirective @eventsPublish(sourceID: String, topic: String!) on FIELD_DEFINITION\n\ndirective @eventsRequest(sourceID: String, topic: String!) on FIELD_DEFINITION\n\ndirective @eventsSubscribe(sourceID: String, topic: String!) on FIELD_DEFINITION\n\ndirective @extends on INTERFACE | OBJECT\n\ndirective @external on FIELD_DEFINITION | OBJECT\n\ndirective @inaccessible on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ndirective @interfaceObject on OBJECT\n\ndirective @key(fields: openfed__FieldSet!, resolvable: Boolean = true) repeatable on INTERFACE | OBJECT\n\ndirective @link(as: String, for: String, import: [String], url: String!) repeatable on SCHEMA\n\ndirective @override(from: String!) on FIELD_DEFINITION\n\ndirective @provides(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @requires(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @requiresScopes(scopes: [[openfed__Scope!]!]!) on ENUM | FIELD_DEFINITION | INTERFACE | OBJECT | SCALAR\n\ndirective @shareable on FIELD_DEFINITION | OBJECT\n\ndirective @tag(name: String!) repeatable on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ntype A {\n  common: CommonA!\n}\n\nunion ABUnion = A | B\n\ntype B {\n  common: CommonB!\n}\n\ntype CommonA {\n  test: Int!\n}\n\ntype CommonB {\n  broken: Int!\n}\n\ntype Query {\n  unions: [Unions!]!\n}\n\ntype Unions {\n  abUnion: ABUnion!\n}\n\nscalar openfed__FieldSet\n\nscalar openfed__Scope"
    }
  },
  "subgraphs": [
    {
      "id": "0",
      "name": "test",
      "routingUrl": "http://localhost:8080/query"
    }
  ]
}